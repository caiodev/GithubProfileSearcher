plugins {
    id 'com.android.application'
    id 'com.google.protobuf' version "$protobufPlugin"
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
}
apply from: "${toolsPath}codeChecking.gradle"
apply from: "${toolsPath}coverage.gradle"
apply from: "${toolsPath}detekt.gradle"
apply from: "${toolsPath}lint.gradle"
apply from: "${toolsPath}protobuf.gradle"

android {
    compileSdkVersion 32
    defaultConfig {
        applicationId "githubprofilesearcher.caiodev.com.br.githubprofilesearcher"
        minSdkVersion 23
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable = true
            testCoverageEnabled = true
            signingConfig signingConfigs.debug
            buildConfigField "String", "API_URL", "$apiUrl"
        }

        release {
            minifyEnabled true
            debuggable = false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_URL", "$apiUrl"
        }
    }

    android.buildFeatures.viewBinding = true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all { useJUnitPlatform() }
    }

    sourceSets {
        androidTest { java.srcDirs += "$sharedTestCodePath" }
        test { java.srcDirs += "$sharedTestCodePath" }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md']
        }
    }

    namespace 'githubprofilesearcher.caiodev.com.br.githubprofilesearcher'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Annotation
    implementation "androidx.annotation:annotation:$annotation"

    //AppCompat
    implementation "androidx.appcompat:appcompat:$appCompat"

    //Browser
    implementation "androidx.browser:browser:$browser"

    //Coil
    implementation "io.coil-kt:coil:$coil"

    //Core
    implementation "androidx.core:core-ktx:$ktxCore"

    //DataStore
    implementation "androidx.datastore:datastore:$dataStore"

    //Koin
    implementation "io.insert-koin:koin-android:$koin"

    //LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"

    //Lifecycle section
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

    //Logging section
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttp"
    implementation "com.jakewharton.timber:timber:$timber"

    //Material design
    implementation "com.google.android.material:material:$materialDesign"

    //Protobuf
    implementation "com.google.protobuf:protobuf-javalite:$protobufVersion"

    //APIConnector
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$serializationConverter"

    //Room
    implementation "androidx.room:room-runtime:$room"
    kapt "androidx.room:room-compiler:$room"
    implementation "androidx.room:room-ktx:$room"

    //Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization"

    //Views/ViewGroups
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
    implementation "androidx.recyclerview:recyclerview:$recyclerView"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshLayout"

    /*Testing section*/

    //JVM
    //ArchTestCore
    testImplementation "androidx.arch.core:core-testing:$archTest"

    //Coroutines
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    //Jacoco
    testImplementation "org.jacoco:org.jacoco.ant:$jacocoVersion"

    //JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:$junit5"

    //Kotest
    testImplementation "io.kotest:kotest-assertions-core:$kotest"
    testImplementation "io.kotest:kotest-property:$kotest"
    testImplementation "io.kotest:kotest-runner-junit5:$kotest"

    //MockWebServer
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttp"

    //Test core
    testImplementation "androidx.test:core-ktx:$testCore"

    //Instrumented/UI
    //ArchTestCore
    androidTestImplementation "androidx.arch.core:core-testing:$archTest"

    //Coroutines
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    //Espresso
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso"

    //JUnit
    androidTestImplementation "androidx.test.ext:junit-ktx:$junitAndroidX"
    androidTestImplementation "org.junit.jupiter:junit-jupiter:$junit5"

    //MockWebServer
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okHttp"

    //Runner
    androidTestImplementation "androidx.test:runner:$testCore"

    //Test core
    androidTestImplementation "androidx.test:core-ktx:$testCore"
}